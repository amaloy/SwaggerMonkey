#!/usr/bin/env python
# python 2.7
#
# Provides service load by making random calls based on a Swagger JSON file.
#

import json
import os
import random
import re
import requests


SM_SWAGGER_FILE = 'SM_SWAGGER_FILE'
SM_TARGET_HOST = 'SM_TARGET_HOST'
SM_TARGET_PORT = 'SM_TARGET_PORT'

SM_SCHEME = 'SM_SCHEME'
SM_INCLUDE_PATHS = 'SM_INCLUDE_PATHS'
SM_ID_FIELDS = 'SM_ID_FIELDS'


def main():
    env_config = read_env_config()

    targets_hosts = env_config[SM_TARGET_HOST].split(',')
    id_fields = get_id_fields(env_config)

    swagger_json = get_swagger_json(env_config[SM_SWAGGER_FILE])
    base_path = get_base_path(swagger_json)
    scheme = get_scheme(swagger_json, env_config)
    base_url_format = scheme + '://{0}:' + env_config[SM_TARGET_PORT] + base_path

    argless_paths = collect_argless_get_paths(swagger_json)
    if SM_INCLUDE_PATHS in env_config:
        for path in env_config[SM_INCLUDE_PATHS].split(','):
            argless_paths.append(path)

    having_one_arg_match = collect_having_one_arg_match(swagger_json, argless_paths)

    print 'Will query these paths:'
    for p in argless_paths:
        output = '* ' + p
        if p in having_one_arg_match:
            output = output + ' -> ' + having_one_arg_match[p]
        print output

    while True:
        random_path = argless_paths[random.randint(0, len(argless_paths) - 1)]
        random_host = targets_hosts[random.randint(0, len(targets_hosts) - 1)]
        url = base_url_format.format(random_host) + random_path

        r = requests.get(url)
        response_json = r.json()
        r.close()

        # Possibly query an id
        if random_path in having_one_arg_match:
            while random.randint(0, 1):
                query_id = get_random_id_from_root_json(response_json, id_fields)
                if query_id is not None:
                    id_url = url + '/' + query_id
                    r = requests.get(id_url)
                    r.close()


# {string : string}
def read_env_config():
    env_config = {}
    try:
        env_config[SM_SWAGGER_FILE] = os.environ[SM_SWAGGER_FILE]
        env_config[SM_TARGET_HOST] = os.environ[SM_TARGET_HOST]
        env_config[SM_TARGET_PORT] = os.environ[SM_TARGET_PORT]
    except KeyError:
        print 'These environment variables must be defined:', SM_SWAGGER_FILE, SM_TARGET_HOST, SM_TARGET_PORT
        exit(1)

    conditional = [SM_SCHEME, SM_INCLUDE_PATHS, SM_ID_FIELDS]
    for k in conditional:
        if k in os.environ:
            env_config[k] = os.environ[k]

    # Print env config
    print 'Environment Config:'
    for k in env_config:
        print '*', k, '=', env_config[k]

    return env_config


def get_id_fields(env_config):
    if SM_ID_FIELDS in env_config:
        id_fields = env_config[SM_ID_FIELDS].split(',')
    else:
        id_fields = ['id']
    return id_fields


def get_swagger_json(source):
    if source.startswith('http'):
        r = requests.get(source)
        sm_swagger_file_content = r.text
        r.close()
    else:
        f = open(source, 'r')
        sm_swagger_file_content = f.read()
        f.close()
    swagger_json = json.loads(json_clean_trailing_commas(sm_swagger_file_content))
    return swagger_json


def get_base_path(swagger_json):
    return swagger_json['basePath'] if 'basePath' in swagger_json else ''


def get_scheme(swagger_json, env_config):
    if SM_SCHEME in env_config:
        scheme = env_config[SM_SCHEME]
    elif 'schemes' in swagger_json:
        scheme = swagger_json['schemes'][0]
    else:
        scheme = 'http'
    return scheme


# []
def collect_argless_get_paths(swagger_json):
    paths = swagger_json['paths']
    result = []
    for path in paths:
        if is_argless_path(path):
            if has_get_method(path, swagger_json):
                result.append(path)
    return result


# { argless_path : one_arg_path }
def collect_having_one_arg_match(swagger_json, argless_paths):
    paths = swagger_json['paths']
    result = {}
    for path in paths:
        if not is_argless_path(path):
            if has_get_method(path, swagger_json):
                # find matching root path (if any)
                for argless_path in argless_paths:
                    if re.match('^(' + argless_path + ')[/]?[{][0-9a-zA-Z]+[}]$', path):
                        result[argless_path] = path
    return result


def is_argless_path(path):
    return path.rstrip().find('{') == -1


def has_get_method(path, swagger_json):
    return 'get' in swagger_json['paths'][path]


def json_clean_trailing_commas(json_content):
    json_content = re.sub(",[ \t\r\n]+}", "}", json_content)
    json_content = re.sub(",[ \t\r\n]+\]", "]", json_content)
    return json_content


def get_random_id_from_root_json(json_object, id_fields):
    # If it uses `data` pattern
    if 'data' in json_object:
        json_object = json_object['data']

    if isinstance(json_object, list) and len(json_object) > 0:
        json_object = json_object[random.randint(0, len(json_object) - 1)]

    for id_field in id_fields:
        if id_field in json_object:
            return json_object[id_field]

    return None


if __name__ == '__main__':
    main()